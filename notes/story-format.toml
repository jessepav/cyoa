# This is a TOML document. See the spec at https://toml.io/en/v1.0.0

# Note that you can also write story documents in HJSON (https://hjson.github.io)
# See test/test-story.hjson for a conversion of test/test-story.toml

[config]
title = "Story Title"
backgroundColor = "rgb(r g b)"
textColor = "rgb(r g b)"
maxWidth = "750px"  # the max width of the story holder

fontSize = "16px"
fontFamily = "Merriweather"  # The CSS font-family name
# URL that will be used to load the font via a <link rel="stylesheet" href="..."> tag
fontLinkHref = """https://fonts.googleapis.com/css2?family=Merriweather\
                    :ital,opsz,wght@0,18..144,300..900;1,18..144,300..900"""
# Or, you can give CSS directly to use a @font-face at-rule to define a custom font
fontCSS = """
@font-face {
  font-family: "FontOfFury";
  src: url("font-of-fury.otf") format("opentype");
}
"""

# Should we use a bold font in the passage name and choice list?
# Some fonts don't have a bold variant, and the browser needs to synthesize it.
useBold = true

imageRendering = "auto|smooth|pixelated"  # corresponds to image-rendering CSS property

# If no fragment identifier is given in the browser href, we start here
startId = "passage1"

# Passage IDs should be alphanumeric identifiers, to avoid causing trouble

[passage1]
# This is shown as a header at the top of the page
name = "Name of Passage"

# The text of a passage can include <i>, <b>, <u>, <s>, and <br> tags.
# It is split into paragraphs at blank lines. If a paragraph ends with "==",
# its text will be right-aligned; if it starts and ends with "==", it will
# be centered.
text = """
Paragraph text the first.

    == Paragraph text the second ==

                  Paragraph text the third ==
"""

# optional, if we want an image
[passage1.img]
src = "url"  # relative URLs will be resolved against the URL of the story file
# optional width and height, to scale the image via CSS
width = "128px"
height = "128px"
# You can float the image beside the text, or choose the alignment on its own line
# above the text. If neither is given, it's center-aligned. If both are given,
# "float" takes precedence.
float = "left|right"
align = "left|center|right"

# optional, if we want music to go along with the passage
[passage1.music]
src = "url"  # should have an extension of wav, mp3, ogg, or webm
volume = 1.0  # from 0.0 to 1.0 (optional)
stream = true # true to stream audio via HTML5 Audio API, false to use WebAudio (optional)
loop = false  # true to have audio loop until the passage is exited (optional)

# The exit choices for the passage are given as the text to display,
# and the ID of the destination passage.
[[passage1.choices]]
text = "Choice #1"
destId = "passage2"

[[passage1.choices]]
text = "Choice #2"
destId = "passage3"

[[passage1.choices]]
text = "Choice #3"
destId = "passage4"

# Note that the inline array and table syntax is useful for writing choices
# more succintly. The above passage1 choices could have been expressed as

[passage1_b]
choices = [
  { text = "Choice #1", destId = "passage2" },
  { text = "Choice #2", destId = "passage3" },
  { text = "Choice #3", destId = "passage4" }
]
